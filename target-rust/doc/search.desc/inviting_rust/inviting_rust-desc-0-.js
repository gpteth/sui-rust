searchState.loadedDescShard("inviting_rust", 0, "第一章：Rust语言基础\n第二章：Rust核心概念\n第三章：Rust 异步编程概念\n第四章：Rust 异步 Web 框架实战\n第一章：Rust语言基础 1.4 …\n第一章：Rust语言基础 1.4 …\n第一章：Rust语言基础 1.3 语法面面观（一） …\nExamples\narray chunk 演示\nconst fn\nconst fn : fib\nconst fn\n展示错误的 const 求值用法\nconst generic\n修正错误的 const 求值用法\nIf True &amp;&amp; While True\n编译期计算原理：MIR 展示\n必须是常量表达式才能在常量上下文使用\n其他的Const fn 用法\n面向表达式 (Expression-Oriented programming)\nFizzBuzz in if\nFizzBuzz in match\n分号表达式 vs 块表达式\n标识符:\n声明宏示例\nPath 展示\n行级文档注释 ( 必须是 3 个斜杠)…\nmod 定义个模块 /* <em>/  /</em>* <em>/  /</em>! */\n空的行级文档注释\n/* <em>/  /</em>* <em>/  /</em>! */\n第二章：Rust核心概念 2.1 …\n第二章：Rust核心概念 2.2 …\n第二章：Rust核心概念 2.3 Thread Safe\n第二章：Rust核心概念 2.3 Lockfree\n第二章：Rust核心概念 2.4 trait 和 泛型\n第二章：Rust核心概念 2.5 …\n第二章：Rust核心概念 2.6 错误处理\n第二章：Rust核心概念 2.7 元编程\n第二章：Rust核心概念 2.8 Unsafe Rust\nRust 语义：Move 语义 与 Copy 语义\nRust 语义：Move 语义 与 Copy 语义\n语义层面来理解 Clone …\nRust 语义：Move 语义 与 Copy 语义\nRust 语义：Move 语义 与 Copy 语义\n示例1: Move 的本质：drop 标记\n示例1: Box 实现 DereMove\n理解普通生命周期参数：\n说明： 生命周期参数：late bound vs early bound\n闭包 与 高阶生命周期\n示例： 理解 trait对象中的生命周期参数\n理解 T vs &amp;T\n理解借用检查 NLL\n理解词法作用域\n构建「无悔」并发系统\n理解本地线程，理解并发\n使用 Arc 和 Mutex 安全共享数据\n线程间共享数据\n并发编程注重的三点：\nOverlapping blanket impls\n对象安全\n概念介绍\n动态分发\ntrait 对象本质\n当不能实现 trait 对象当时候该如何？\n对象安全规则里，为什么需要 <code>Self: Sized</code>\nRust 是面向对象语言吗？\n消除失败\n分层错误处理\npanic 的两种类型：\n动态自省\n属性宏\n声明宏\n介绍：serde.rs\n其他介绍\n安全抽象\nUnsafe Rust 介绍\n第三章：Rust 异步编程概念\n第三章：Rust 异步编程概念\n第三章：Rust 异步编程概念\n异步 I/O 模型\nepoll\nRust 实现 epoll server 示例讲解\n事件驱动编程模型\nio_uring 异步 I/O 模型\n…\n一个异步缓存代码实现源码导读 ：retainer\nFuture 和 Futures-rs 概要\n通过实现一个简单的 async/await echo server …\n深入理解 Future 和 Futures-rs\n异步实现细节：生成器 与 协程\n前奏\n<code>no-std</code> 下的异步\n通过学习 smol 建立整体异步编程概念框架\nasync-std 运行时架构\nTokio 运行时 架构\n其他运行时 架构\n第四章：Rust Web 框架实战")